#!/bin/bash

# Error handling
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Wait for MariaDB to be ready
log "Waiting for MariaDB to be ready..."
max_retries=30
retry_count=0

while [ $retry_count -lt $max_retries ]; do
    if mysqladmin ping -h"${WP_DB_HOST%%:*}" -u"${WP_DB_USER}" -p"${WP_DB_PASSWORD}" --silent 2>/dev/null; then
        log "MariaDB is ready!"
        break
    fi
    retry_count=$((retry_count + 1))
    if [ $retry_count -eq $max_retries ]; then
        error "MariaDB did not become ready in time"
        exit 1
    fi
    sleep 2
done

# Check if WordPress is already installed
if [ -f /var/www/wordpress/wp-config.php ] && wp core is-installed --allow-root --path=/var/www/wordpress 2>/dev/null; then
    log "WordPress is already installed and configured."
    
    # Ensure PHP-FPM directory exists
    mkdir -p /run/php
    
    # Start PHP-FPM
    exec "$@"
    exit 0
fi

log "Starting WordPress installation and configuration..."

# Create WordPress directory if it doesn't exist
mkdir -p /var/www/wordpress
cd /var/www/wordpress

# Download WordPress core files
log "Downloading WordPress core files..."
wp core download \
    --allow-root \
    --path=/var/www/wordpress \
    --locale=en_US \
    --force

# Create wp-config.php with all necessary settings
log "Creating wp-config.php..."

# Generate salts
AUTH_KEY=$(openssl rand -base64 32)
SECURE_AUTH_KEY=$(openssl rand -base64 32)
LOGGED_IN_KEY=$(openssl rand -base64 32)
NONCE_KEY=$(openssl rand -base64 32)
AUTH_SALT=$(openssl rand -base64 32)
SECURE_AUTH_SALT=$(openssl rand -base64 32)
LOGGED_IN_SALT=$(openssl rand -base64 32)
NONCE_SALT=$(openssl rand -base64 32)

# Create wp-config.php with extra configurations
cat > /var/www/wordpress/wp-config.php << EOF
<?php
/**
 * WordPress configuration file - Auto-generated by Inception
 */

// ** Database settings ** //
define( 'DB_NAME', '${WP_DB_NAME}' );
define( 'DB_USER', '${WP_DB_USER}' );
define( 'DB_PASSWORD', '${WP_DB_PASSWORD}' );
define( 'DB_HOST', '${WP_DB_HOST}' );
define( 'DB_CHARSET', 'utf8mb4' );
define( 'DB_COLLATE', '' );

// ** Authentication Unique Keys and Salts ** //
define( 'AUTH_KEY',         '${AUTH_KEY}' );
define( 'SECURE_AUTH_KEY',  '${SECURE_AUTH_KEY}' );
define( 'LOGGED_IN_KEY',    '${LOGGED_IN_KEY}' );
define( 'NONCE_KEY',        '${NONCE_KEY}' );
define( 'AUTH_SALT',        '${AUTH_SALT}' );
define( 'SECURE_AUTH_SALT', '${SECURE_AUTH_SALT}' );
define( 'LOGGED_IN_SALT',   '${LOGGED_IN_SALT}' );
define( 'NONCE_SALT',       '${NONCE_SALT}' );

// ** WordPress Database Table prefix ** //
\$table_prefix = 'wp_';

// ** WordPress debugging mode ** //
define( 'WP_DEBUG', false );
define( 'WP_DEBUG_LOG', false );
define( 'WP_DEBUG_DISPLAY', false );

// ** Force SSL for admin and logins ** //
define( 'FORCE_SSL_ADMIN', true );
define( 'FORCE_SSL_LOGIN', true );

// ** Disable file editing from WordPress admin ** //
define( 'DISALLOW_FILE_EDIT', true );

// ** Memory limits ** //
define( 'WP_MEMORY_LIMIT', '128M' );
define( 'WP_MAX_MEMORY_LIMIT', '256M' );

// ** Site URL settings ** //
define( 'WP_HOME', 'https://${DOMAIN_NAME}' );
define( 'WP_SITEURL', 'https://${DOMAIN_NAME}' );

// ** Disable automatic updates ** //
define( 'AUTOMATIC_UPDATER_DISABLED', true );
define( 'WP_AUTO_UPDATE_CORE', false );

// ** Performance optimizations ** //
define( 'COMPRESS_CSS', true );
define( 'COMPRESS_SCRIPTS', true );
define( 'CONCATENATE_SCRIPTS', false );
define( 'ENFORCE_GZIP', true );

// ** Security settings ** //
define( 'DISALLOW_FILE_MODS', false );
define( 'WP_POST_REVISIONS', 10 );
define( 'EMPTY_TRASH_DAYS', 30 );

// ** Absolute path to the WordPress directory ** //
if ( ! defined( 'ABSPATH' ) ) {
    define( 'ABSPATH', __DIR__ . '/' );
}

// ** Sets up WordPress vars and included files ** //
require_once ABSPATH . 'wp-settings.php';
EOF

log "wp-config.php created successfully"

# Install WordPress core
log "Installing WordPress..."
wp core install \
    --url="https://${DOMAIN_NAME}" \
    --title="Inception - 42 Project" \
    --admin_user="${WP_ADMIN_USER}" \
    --admin_password="${WP_ADMIN_PASSWORD}" \
    --admin_email="${WP_ADMIN_EMAIL}" \
    --skip-email \
    --allow-root \
    --path=/var/www/wordpress

if [ $? -eq 0 ]; then
    log "WordPress core installation completed"
else
    error "WordPress installation failed"
    exit 1
fi

# Create additional user (non-admin)
log "Creating additional user..."
wp user create \
    "${WP_USER}" \
    "${WP_USER_EMAIL}" \
    --user_pass="${WP_USER_PASSWORD}" \
    --role=author \
    --display_name="Test User" \
    --first_name="Test" \
    --last_name="User" \
    --allow-root \
    --path=/var/www/wordpress

if [ $? -eq 0 ]; then
    log "Additional user created successfully"
else
    warning "Failed to create additional user"
fi

# Configure WordPress settings
log "Configuring WordPress settings..."

# Set timezone
wp option update timezone_string 'Asia/Tokyo' --allow-root --path=/var/www/wordpress

# Set date and time format
wp option update date_format 'Y-m-d' --allow-root --path=/var/www/wordpress
wp option update time_format 'H:i' --allow-root --path=/var/www/wordpress

# Set permalink structure
wp rewrite structure '/%postname%/' --allow-root --path=/var/www/wordpress
wp rewrite flush --allow-root --path=/var/www/wordpress

# Disable comments by default
wp option update default_comment_status 'closed' --allow-root --path=/var/www/wordpress
wp option update default_ping_status 'closed' --allow-root --path=/var/www/wordpress

# Set site language
wp language core install ja --allow-root --path=/var/www/wordpress || true
wp site switch-language en_US --allow-root --path=/var/www/wordpress

# Remove default content
log "Cleaning up default content..."
wp post delete 1 --force --allow-root --path=/var/www/wordpress 2>/dev/null || true  # Hello World post
wp post delete 2 --force --allow-root --path=/var/www/wordpress 2>/dev/null || true  # Sample page
wp comment delete 1 --force --allow-root --path=/var/www/wordpress 2>/dev/null || true  # Default comment

# Create initial content
log "Creating initial content..."
wp post create \
    --post_title="Welcome to Inception" \
    --post_content="This is the Inception project for 42 School. This WordPress installation has been automatically configured." \
    --post_status="publish" \
    --post_author="${WP_ADMIN_USER}" \
    --allow-root \
    --path=/var/www/wordpress

# Create a sample page
wp post create \
    --post_type="page" \
    --post_title="About" \
    --post_content="This is a sample page created during the automated installation process." \
    --post_status="publish" \
    --post_author="${WP_ADMIN_USER}" \
    --allow-root \
    --path=/var/www/wordpress

# Deactivate and delete unnecessary plugins
log "Managing plugins..."
wp plugin deactivate --all --allow-root --path=/var/www/wordpress 2>/dev/null || true
wp plugin delete hello akismet --allow-root --path=/var/www/wordpress 2>/dev/null || true

# Remove unnecessary themes (keep only twentytwentyone)
log "Managing themes..."
wp theme delete twentynineteen twentytwenty --allow-root --path=/var/www/wordpress 2>/dev/null || true

# Set correct file permissions
log "Setting file permissions..."
chown -R www-data:www-data /var/www/wordpress
find /var/www/wordpress -type d -exec chmod 755 {} \;
find /var/www/wordpress -type f -exec chmod 644 {} \;

# Special permissions for wp-config.php
chmod 600 /var/www/wordpress/wp-config.php
chown www-data:www-data /var/www/wordpress/wp-config.php

# Create .htaccess for additional security
cat > /var/www/wordpress/.htaccess << 'EOF'
# BEGIN WordPress
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
</IfModule>
# END WordPress

# Security Headers
<IfModule mod_headers.c>
Header set X-Content-Type-Options "nosniff"
Header set X-Frame-Options "SAMEORIGIN"
Header set X-XSS-Protection "1; mode=block"
</IfModule>

# Protect wp-config.php
<files wp-config.php>
order allow,deny
deny from all
</files>

# Disable directory browsing
Options -Indexes
EOF

chown www-data:www-data /var/www/wordpress/.htaccess
chmod 644 /var/www/wordpress/.htaccess

# Configure PHP-FPM
log "Configuring PHP-FPM..."
mkdir -p /run/php
chown www-data:www-data /run/php

# Create PHP info file for debugging (can be removed in production)
cat > /var/www/wordpress/info.php << 'EOF'
<?php
// Remove this file in production
if (isset($_GET['secret']) && $_GET['secret'] === 'inception42') {
    phpinfo();
} else {
    header('HTTP/1.0 404 Not Found');
    echo "404 Not Found";
}
EOF

# Display installation summary
log "========================================="
log "WordPress Installation Complete!"
log "========================================="
log "Site URL: https://${DOMAIN_NAME}"
log "Admin URL: https://${DOMAIN_NAME}/wp-admin"
log "Admin User: ${WP_ADMIN_USER}"
log "Additional User: ${WP_USER}"
log "========================================="

# Check installation status
if wp core is-installed --allow-root --path=/var/www/wordpress; then
    log "WordPress installation verified successfully"
else
    error "WordPress installation verification failed"
    exit 1
fi

# Start PHP-FPM
log "Starting PHP-FPM..."
exec "$@"
